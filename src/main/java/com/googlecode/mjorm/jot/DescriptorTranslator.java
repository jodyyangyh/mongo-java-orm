package com.googlecode.mjorm.jot;

import java.lang.reflect.Modifier;
import java.lang.reflect.Type;
import java.util.LinkedList;
import java.util.List;

import org.bson.types.ObjectId;

import com.googlecode.mjorm.DBObjectUtil;
import com.googlecode.mjorm.MjormException;
import com.googlecode.mjorm.ObjectDescriptor;
import com.googlecode.mjorm.ObjectDescriptorRegistry;
import com.googlecode.mjorm.PropertyDescriptor;
import com.googlecode.jot.TranslationContext;
import com.googlecode.jot.ReflectionUtil;
import com.googlecode.jot.TranslationHints;
import com.googlecode.jot.TypeTranslator;
import com.mongodb.BasicDBObject;

/***
 * Converts {@link BasicDBObject} to pojos.
 *
 */
public class DescriptorTranslator
	implements TypeTranslator<BasicDBObject, Object> {

	private ObjectDescriptorRegistry registry;

	/**
	 * Creates the {@code DescriptorTranslator}.
	 * @param registry the {@link ObjectDescriptorRegistry}
	 */
	public DescriptorTranslator(ObjectDescriptorRegistry registry) {
		this.registry = registry;
	}

	/**
	 * {@inheritDoc}
	 */
	public boolean supportsLocal(Type type) {
		return registry.hasDescriptor(type);
	}

	/**
	 * {@inheritDoc}
	 */
	public BasicDBObject translateFromLocal(Object pojo, TranslationContext converter, TranslationHints hints) {

		// create the return object
		BasicDBObject ret = new BasicDBObject();

		// get the descriptors
		List<ObjectDescriptor> descriptors = registry.getDescriptorsForType(pojo.getClass());
		if (descriptors.isEmpty()) {
			throw new MjormException("Unable to find ObjectDescriptor for "+pojo.getClass());
		}

		// loop through each descriptor
		for (ObjectDescriptor descriptor : descriptors) {
	
			// loop through each property
			for (PropertyDescriptor prop : descriptor.getProperties()) {
	
				try {
					// get it
					Object value = prop.get(pojo);
	
					// handle ids
					if (prop.isIdentifier()) {
						if (value==null && !prop.isAutoGenerated()) {
							continue;
						} else if (value==null && prop.isAutoGenerated()) {
							ObjectId autoGenId = new ObjectId();
							prop.set(pojo, autoGenId.toStringMongod());
							ret.put("_id", autoGenId);
						} else if (value!=null && ObjectId.class.isInstance(value)) {
							ret.put("_id", ObjectId.class.cast(value));
						} else if (value!=null) {
							ret.put("_id", new ObjectId(String.class.cast(value)));
						}
	
					} else {
						Object convertedValue = converter.translateFromLocal(value);
						ret.put(prop.getPropColumn(), convertedValue);
					}

				} catch (Exception e) {
					throw new MjormException(
						"Error mapping property "+prop.getName()
						+" of class "+descriptor.getType(), e);
				}
	
			}
		}

		// return it
		return ret;
	}

	/**
	 * {@inheritDoc}
	 */
	public Object translateToLocal(
		BasicDBObject object, TranslationContext converter, Type desiredType, TranslationHints hints) {

		// get the descriptors
		LinkedList<ObjectDescriptor> descriptors = registry.getDescriptorsForType(desiredType);
		if (descriptors.isEmpty()) {
			throw new MjormException("Unable to find ObjectDescriptor for "+desiredType);
		}

		// get descriptor
		ObjectDescriptor descriptor = descriptors.get(descriptors.size()-1);

		// get the discriminator name
		String discriminatorName = descriptor.getDiscriminatorName();
		Object discriminator = null;
		if (discriminatorName!=null && discriminatorName.trim().length()>0) {
			discriminator = DBObjectUtil.getNestedProperty(object,discriminatorName);
		}

		// if we have a discriminiator - figure out which
		// subclass to use
		if (discriminator!=null) {
			ObjectDescriptor subClass = descriptor.getSubClassObjectDescriptor(discriminator);
			if (subClass==null && Modifier.isAbstract(descriptor.getType().getModifiers())) {
				throw new MjormException(
					"Sublcass for discriminiator value "+discriminator
					+" was not found on abstract ObjectDescriptor for "
					+ descriptor.getType().getName());
			} else if (subClass!=null) {
				descriptor = subClass;
				descriptors.addFirst(subClass);
			}
		}

		// create the return object
		Object ret;
		try {
			ret = ReflectionUtil.instantiate(descriptor.getType());
		} catch (Exception e) {
			throw new MjormException(
				"Error creating class: "+desiredType, e);
		}

		// loop through each descriptor
		for (ObjectDescriptor desc : descriptors) {
	
			// loop through each property
			for (PropertyDescriptor prop : desc.getProperties()) {
	
				try {
					if (prop.isIdentifier()) {
						Object value = object.get("_id");
						if (value==null) {
							continue;
						}
						prop.set(ret, ObjectId.class.cast(value).toStringMongod());
	
					} else {
						Object convertedValue = converter.translateToLocal(
							object.get(prop.getPropColumn()),
							prop.getType(),
							prop.createTranslationHints());
	
						prop.set(ret, convertedValue);
					}
	
				} catch (Exception e) {
					throw new MjormException(
						"Error mapping property "+prop.getName()
						+" of class "+descriptor.getType(), e);
				}
	
			}
		}

		// return it
		return ret;
	}

}
